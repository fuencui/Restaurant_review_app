[{"/Users/fuencui/Desktop/review_app_fuen/src/index.js":"1","/Users/fuencui/Desktop/review_app_fuen/src/DishList.jsx":"2","/Users/fuencui/Desktop/review_app_fuen/src/NavBar.jsx":"3","/Users/fuencui/Desktop/review_app_fuen/src/InsertDish.jsx":"4","/Users/fuencui/Desktop/review_app_fuen/src/CreateUser.jsx":"5","/Users/fuencui/Desktop/review_app_fuen/src/Login.jsx":"6","/Users/fuencui/Desktop/review_app_fuen/src/UserAccount.jsx":"7","/Users/fuencui/Desktop/review_app_fuen/src/DishDetail.jsx":"8","/Users/fuencui/Desktop/review_app_fuen/src/SearchList.jsx":"9"},{"size":1026,"mtime":1650848676081,"results":"10","hashOfConfig":"11"},{"size":1460,"mtime":1650843607731,"results":"12","hashOfConfig":"11"},{"size":3735,"mtime":1650851268943,"results":"13","hashOfConfig":"11"},{"size":5331,"mtime":1650835514920,"results":"14","hashOfConfig":"11"},{"size":1399,"mtime":1650514034616,"results":"15","hashOfConfig":"11"},{"size":1292,"mtime":1650524076663,"results":"16","hashOfConfig":"11"},{"size":768,"mtime":1650513785309,"results":"17","hashOfConfig":"11"},{"size":9924,"mtime":1650843931890,"results":"18","hashOfConfig":"11"},{"size":1531,"mtime":1650849348098,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"cx4nxr",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"23"},"/Users/fuencui/Desktop/review_app_fuen/src/index.js",[],[],[],"/Users/fuencui/Desktop/review_app_fuen/src/DishList.jsx",["54","55","56"],[],"import react, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport './DishList.css';\nimport NavBar from './NavBar';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nexport default function DishList() {\n    const [allDish, setAllDish] = useState([]);\n\n    function findAllDish() {\n        axios.get('/api/dish')\n            .then(response => {\n                setAllDish(response.data)\n            })\n            .catch(error => console.error(error));\n    }\n\n    useEffect(findAllDish, []);\n\n    function base64ToImage(dish){\n        if(dish.base64 != 'null'){\n            return <img className='img' src={dish.base64}></img>\n        } else {\n            return <h1>Image Not Exists</h1>;\n        }\n    } \n\n    const DishListComponent = [];\n    for (let dish of allDish){\n        DishListComponent.unshift(\n            <div className='dishContainer' key={dish._id}>\n                <Link className='link' to={'/dish/' + dish._id}></Link>\n                 {base64ToImage(dish)}\n                <h5>Dish: {dish.dishName}</h5>\n                <h5>Restaurant: {dish.restaurant}</h5>\n                <h5>Average Rating: {dish.rank}</h5> \n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <NavBar onClick={findAllDish()}/>\n            <h1>Recent Comments</h1>\n            <div className='ListContainer'>\n                {DishListComponent}\n            </div>\n        </div>\n    )\n}",[],"/Users/fuencui/Desktop/review_app_fuen/src/NavBar.jsx",[],[],"/Users/fuencui/Desktop/review_app_fuen/src/InsertDish.jsx",["57"],[],"import axios from \"axios\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { Button, Offcanvas ,InputGroup ,FormControl} from \"react-bootstrap\";\n\n\n\nexport default function InsertDish() {\n    const [dish, setDish] = useState({\n        dishName: '',\n        restaurant: '',\n        description: '',\n        rank: '',\n        address: '',\n        base64: '',\n        username: '',\n    })\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const navigate = useNavigate();\n\n    useEffect(function() {\n        axios.get('/api/user/isLoggedIn')\n        .then(response => setDish({...dish, username:response.data.username}))\n        .catch(error => console.log(\"User is not logged in \"));\n    }, [])\n\n\n    async function postDish(){\n        const promise = new Promise((resolve, reject) => {\n            \n            axios.post('/api/dish', dish)\n            .then((dish) => {\n                resolve(dish.data._id);\n                \n            })\n            .catch(e => console.log(e));\n            setShow(false);\n        });\n        const id = await promise;\n\n        navigate('/dish/' + id)\n    }\n \n    async function handleImage(e) {\n        let promise = new Promise((resolve, reject) => {\n            const file = e.target.files[0];\n            const filesize = file.size;\n            if (filesize > 4100000){\n                return;\n            } else {\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function(e) {\n                    resolve(e.target.result);\n                }\n            }\n        });\n        let result = await promise;\n\n        setDish({\n            ...dish,\n            base64: result,\n        })\n    }\n\n  return (\n    <div className=\"insertdish\">\n      <Button variant=\"success\" style={{backgroundColor : '#70a9a1', border : '0px'}}onClick={handleShow}>\n        Write a Review\n      </Button>\n      <Offcanvas show={show} onHide={handleClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title><i className=\"bi bi-egg-fried\"></i> Leave Your Review Here</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n        {/* <div>\n            <input type='text' value={dish.dishName} onChange={e => {setDish({...dish, dishName: e.target.value})}}/>\n            <input type='text' value={dish.restaurant} onChange={e => {setDish({...dish, restaurant: e.target.value})}}/>\n            <input type='text' value={dish.description} onChange={e => {setDish({...dish, description: e.target.value})}}/>\n            <input type='number' value={dish.rank} min=\"0\" max=\"5\" step=\"0.5\" onChange={e => {setDish({...dish, rank: e.target.value})}}/>\n            <input type='text' value={dish.address} onChange={e => {setDish({...dish, address: e.target.value})}}/>\n            <input type='file' accept=\"image/png, image/jpeg\" onChange={e => handleImage(e)}/>\n            <button onClick={postDish}>Post Job</button>\n        </div> */}\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\" >Dish</InputGroup.Text>\n            <FormControl type='text' value={dish.dishName} onChange={e => {setDish({...dish, dishName: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">Restaurant</InputGroup.Text>\n            <FormControl value={dish.restaurant} onChange={e => {setDish({...dish, restaurant: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">Description</InputGroup.Text>\n            <FormControl type='text' value={dish.description} onChange={e => {setDish({...dish, description: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">Rank</InputGroup.Text>\n            <FormControl type='number' value={dish.rank} min=\"0\" max=\"5\" step=\"0.5\" onChange={e => {setDish({...dish, rank: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">address</InputGroup.Text>\n            <FormControl type='text' value={dish.address} onChange={e => {setDish({...dish, address: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n        </InputGroup>\n        <InputGroup size=\"sm\" className=\"mb-3\">\n            <InputGroup.Text id=\"inputGroup-sizing-sm\">Image</InputGroup.Text>\n            <FormControl type='file' name='file' title='title' accept=\"image/png, image/jpeg\" onChange={e => handleImage(e)}/>\n        </InputGroup>\n        <Button variant=\"primary\" size=\"lg\" onClick={postDish} style={{backgroundColor : '#90be6d', border: '0px'}}>\n            Post Review\n        </Button>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n}\n","/Users/fuencui/Desktop/review_app_fuen/src/CreateUser.jsx",[],[],[],"/Users/fuencui/Desktop/review_app_fuen/src/Login.jsx",[],[],"/Users/fuencui/Desktop/review_app_fuen/src/UserAccount.jsx",[],[],"/Users/fuencui/Desktop/review_app_fuen/src/DishDetail.jsx",["58","59"],[],"import axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport { useParams } from 'react-router';\nimport NavBar from './NavBar';\nimport { Button, Offcanvas ,InputGroup ,FormControl} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport './DishDetail.css';\n\nexport default function DishDetail(props){\n    const[dish, setDish] = useState(undefined);\n    const[commentList, setCommentList] = useState([]);\n    const [comment, setComment] = useState({\n        username: null,\n        comment: '',\n        rank: '',\n        dishId: null,\n    })\n    const [show, setShow] = useState(false);\n    const [showComment, setShowComment] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const handleCloseComment = () => setShowComment(false);\n    const handleShowComment = () => setShowComment(true);\n    const param = useParams();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        async function fetchData() {\n            const id = await axios.get('/api/dish/' + param.dishId)\n            .then(function(response){\n                setDish(response.data);\n                setComment({...comment, dishId: param.dishId})\n                return param.dishId;\n            })\n            .catch(error => console.log(\"cannot find dish\"))\n\n            await axios.get('/api/user/isLoggedIn')\n            .then(response => setComment({...comment, dishId: id,username:response.data.username}))\n            .catch(error => console.log(\"User is not logged in \"))\n          }\n        fetchData();\n        findAllComment();\n        } ,[setComment,setCommentList,setDish] );\n\n    function findAllComment() {\n        axios.get('/api/comment/Id/' + param.dishId)\n            .then(function(response){\n                setCommentList(response.data);\n            })\n            .catch(e => console.log(e));\n    }\n\n\n    async function postComment(){\n        try {\n            if (comment.username && comment.dishId){\n                await axios.post('/api/comment', comment)\n                .then((commentResponse) => {\n                console.log(commentResponse)})\n                .catch(e => console.log(e));\n                setShow(false);\n            }\n        } catch (e) {\n            console.log(e);\n        } finally{\n            averageAllRating();\n            findAllComment();\n        }\n    }\n\n    if (!dish){\n        return (<div>\n            Dish not found\n        </div>)\n    }\n\n    function base64ToImage(dish){\n        if(dish.base64 !== 'null'){\n            return <img className='img' src={dish.base64}></img>\n        } else {\n            return <h1>Image Not Exists</h1>;\n        }\n    } \n\n    async function handleDeleteReview(){\n        try {\n            await axios.delete('/api/comment/deleteAll/' + param.dishId)\n            .then(res => console.log('detele all'))\n            .catch(e => console.log(e));\n            await axios.delete('/deleteDish/' + param.dishId)\n            .then(res => navigate('/dish'))\n            .catch(e => console.log(e));\n\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    async function handleDeleteComment(){\n        try {\n            await axios.delete('/api/comment/deleteUsernameAndDishId/' + param.dishId + '/' + dish.username)\n            .then(res => console.log(res))\n            .catch(e => console.log(e));\n        } catch (e){\n            console.log(e);\n        } finally {\n            findAllComment();\n        }\n    }\n\n    async function handleEdit(){\n        try {\n            await axios.put('/api/comment/updateComment/' + param.dishId + '/' + dish.username, comment)\n            .then(res => console.log(res))\n            .catch(e => console.log(e));\n        } catch (e){\n            console.log(e);\n        } finally {\n            findAllComment();\n            setShowComment(false);\n            averageAllRating();\n        }\n    }\n\n    async function averageAllRating(){\n        if (!dish) return\n        let numberOfuser = commentList.length + 2;\n        let ratingTotal = parseInt(dish.rank) + parseInt(comment.rank);\n        let newRate = dish.rank;\n        try {\n            for (let rate of commentList){\n                ratingTotal += rate.rank;\n            }\n        } catch (e){\n            console.log(e);\n        } finally {\n            newRate = (ratingTotal/numberOfuser);\n            axios.put('/api/dish/' + param.dishId, {rank:newRate})\n            .then(res => console.log(res))\n            .catch(e => console.log(e));\n        }\n        return setDish({...dish, rank:newRate})\n    }\n\n    function ableToDetele(){\n        if (comment.username === dish.username){\n            return (\n                <div>\n                    <Button variant=\"success\" size='sm' style={{backgroundColor : '#70a9a1', border : '0px'}}onClick={handleDeleteReview}>\n                        Detele This Review\n                    </Button>\n                </div>\n            )\n        }\n    }\n\n    function ableToDeteleCommentEdit(username){\n        if (username === comment.username){\n            return (\n                <div>\n                    <Button variant=\"success\" size='sm' style={{backgroundColor : '#70a9a1', border : '0px'}}onClick={handleDeleteComment}>\n                        Detele Comment\n                    </Button>\n                    \n                    <Button variant=\"success\" size='sm' style={{backgroundColor : '#70a9a1', border : '0px'}}onClick={handleShowComment}>\n                        Edit Comment\n                    </Button>\n                    <Offcanvas show={showComment} onHide={handleCloseComment}>\n                    <Offcanvas.Header closeButton>\n                    <Offcanvas.Title><i className=\"bi bi-egg-fried\"></i>Edit A Comment</Offcanvas.Title>\n                    </Offcanvas.Header>\n                    <Offcanvas.Body>\n            \n                    <InputGroup size=\"sm\" className=\"mb-3\">\n                        <InputGroup.Text id=\"inputGroup-sizing-sm\" >Comment</InputGroup.Text>\n                        <FormControl type='text' value={comment.comment} onChange={e => {setComment({...comment, comment: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                    </InputGroup>\n            \n                    <InputGroup size=\"sm\" className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Rank</InputGroup.Text>\n                        <FormControl type='number' value={comment.rank} min=\"0\" max=\"5\" step=\"0.5\" onChange={e => {setComment({...comment, rank: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                    </InputGroup>\n                    \n                    <Button variant=\"primary\" size=\"sm\" onClick={handleEdit} style={{backgroundColor : '#90be6d', border: '0px'}}>\n                        Edit Comment\n                    </Button>\n                    </Offcanvas.Body>\n                    </Offcanvas>\n                    </div>\n            )\n        }\n    }\n\n    function abltToReview(){\n        if(comment.username != null){\n            return (\n                <div>\n                <Button variant=\"success\" style={{backgroundColor : '#70a9a1', border : '0px'}}onClick={handleShow}>\n                Write a Comment\n                </Button>\n                <Offcanvas show={show} onHide={handleClose}>\n                <Offcanvas.Header closeButton>\n                  <Offcanvas.Title><i className=\"bi bi-egg-fried\"></i>Write a Comment</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n        \n                <InputGroup size=\"sm\" className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\" >Comment</InputGroup.Text>\n                    <FormControl type='text' value={comment.comment} onChange={e => {setComment({...comment, comment: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                </InputGroup>\n        \n                <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Text id=\"inputGroup-sizing-sm\">Rank</InputGroup.Text>\n                    <FormControl type='number' value={comment.rank} min=\"0\" max=\"5\" step=\"0.5\" onChange={e => {setComment({...comment, rank: e.target.value})}} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                </InputGroup>\n                \n                <Button variant=\"primary\" size=\"lg\" onClick={postComment} style={{backgroundColor : '#90be6d', border: '0px'}}>\n                    Post Comment\n                </Button>\n                </Offcanvas.Body>\n                </Offcanvas>\n                </div>\n            )\n        } else {\n            return (\n            <div>\n            <Button variant=\"success\" style={{backgroundColor : '#70a9a1', border : '0px'}}>\n                Login To Write A Review\n            </Button>\n            </div>\n            )\n        }\n    }\n\n    const dishDetailComponent = [];\n    for (let comment of commentList){\n        dishDetailComponent.push(\n            <div className='commentContainer' key={comment._id}>\n                <h3>Username: {comment.username}</h3>\n                <h3>Commennt: {comment.comment}</h3>\n                <h3>Rank: {comment.rank}</h3> \n                {ableToDeteleCommentEdit(comment.username)} \n            </div>\n    )}\n\n    return (\n        <div>\n            <NavBar/>\n            <div className='mainDetailContainer'>\n                <div className='buttonMid'>{abltToReview()}</div>\n                <div className='reviewContainer' key={dish._id}>\n                    {base64ToImage(dish)}\n                    <h3>Username: {dish.username}</h3>\n                    <h3>Average Rank: {dish.rank}</h3>\n                    {ableToDetele()}\n                </div>\n                {dishDetailComponent}\n                \n            </div>\n            \n\n        \n        </div>\n    )\n}","/Users/fuencui/Desktop/review_app_fuen/src/SearchList.jsx",["60","61","62","63"],[],"import react, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nexport default function SearchList() {\n    const [searchDish, setSearchList] = useState([]);\n    const param = useParams();\n\n    function findAllDish() {\n        axios.get('/api/dish/search/' + param.searchId)\n        .then(response => {\n            setSearchList(response.data)\n        })\n        .catch(error => console.error(error));\n    }\n\n    useEffect(findAllDish, []);\n\n    function base64ToImage(dish){\n        if(dish.base64 != 'null'){\n            return <img className='img' src={dish.base64}></img>\n        } else {\n            return <h1>Image Not Exists</h1>;\n        }\n    } \n\n    const DishListComponent = [];\n    for (let dish of searchDish){\n        DishListComponent.unshift(\n            <div className='dishContainer' key={dish._id}>\n                <Link className='link' to={'/dish/' + dish._id}></Link>\n                 {base64ToImage(dish)}\n                <h5>Dish: {dish.dishName}</h5>\n                <h5>Restaurant: {dish.restaurant}</h5>\n                <h5>Average Rating: {dish.rank}</h5> \n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <NavBar onClick={findAllDish()}/>\n            <h1>Recent Comments</h1>\n            <div className='ListContainer'>\n                {DishListComponent}\n            </div>\n        </div>\n    )\n}",{"ruleId":"64","severity":1,"message":"65","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":22,"column":24,"nodeType":"70","messageId":"71","endLine":22,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":23,"column":20,"nodeType":"74","endLine":23,"endColumn":59},{"ruleId":"75","severity":1,"message":"76","line":29,"column":8,"nodeType":"77","endLine":29,"endColumn":10,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":43,"column":12,"nodeType":"77","endLine":43,"endColumn":47,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"73","line":79,"column":20,"nodeType":"74","endLine":79,"endColumn":59},{"ruleId":"64","severity":1,"message":"65","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"75","severity":1,"message":"81","line":20,"column":28,"nodeType":"77","endLine":20,"endColumn":30,"suggestions":"82"},{"ruleId":"68","severity":1,"message":"69","line":23,"column":24,"nodeType":"70","messageId":"71","endLine":23,"endColumn":26},{"ruleId":"72","severity":1,"message":"73","line":24,"column":20,"nodeType":"74","endLine":24,"endColumn":59},"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dish'. Either include it or remove the dependency array. You can also do a functional update 'setDish(d => ...)' if you only need 'dish' in the 'setDish' call.","ArrayExpression",["83"],"React Hook useEffect has missing dependencies: 'comment', 'findAllComment', and 'param.dishId'. Either include them or remove the dependency array. You can also do a functional update 'setComment(c => ...)' if you only need 'comment' in the 'setComment' call.",["84"],"React Hook useEffect has a missing dependency: 'param.searchId'. Either include it or remove the dependency array.",["85"],{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [dish]",{"range":"92","text":"93"},"Update the dependencies array to be: [comment, findAllComment, param.dishId, setComment, setCommentList, setDish]",{"range":"94","text":"95"},"Update the dependencies array to be: [param.searchId]",{"range":"96","text":"97"},[875,877],"[dish]",[1637,1672],"[comment, findAllComment, param.dishId, setComment, setCommentList, setDish]",[614,616],"[param.searchId]"]